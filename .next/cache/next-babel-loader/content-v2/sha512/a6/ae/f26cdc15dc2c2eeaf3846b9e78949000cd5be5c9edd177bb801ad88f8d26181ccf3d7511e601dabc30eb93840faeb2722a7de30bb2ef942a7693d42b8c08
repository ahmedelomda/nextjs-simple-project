{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\Web-Development\\\\React\\\\new\\\\NextJS\\\\06-onwards-to-a-bigger-project-starting-project\\\\06-onwards-to-bigger-project\\\\pages\\\\index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { Fragment } from \"react\";\n\nconst HomePage = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 12\n  }, this);\n}; // Server Side Rendering (SSR) for pre-rendering component\n// export async function getServerSideProps(context) {\n//     const req = context.req;\n//     const res = context.res;\n//     // fetch data\n//     return {\n//         props: {\n//             meetups: dummy\n//         }\n//     }\n// }\n// Static Site  Generation (SSG) for pre-rendering component\n\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect(\"mongodb+srv://amohamed5535:j1IJSAFLlXtQEgdf@cluster0.gnskzxn.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(item => ({\n        title: item.title,\n        address: item.address,\n        image: item.image,\n        id: item._id.toString()\n      }))\n    },\n    revalidate: 1 // every second get data\n\n  };\n}\nexport default HomePage;","map":{"version":3,"sources":["G:/Web-Development/React/new/NextJS/06-onwards-to-a-bigger-project-starting-project/06-onwards-to-bigger-project/pages/index.js"],"names":["MongoClient","MeetupList","Fragment","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","item","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAExB,sBAAO,QAAC,QAAD;AAAA,iCAAW,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEH,CAJD,C,CAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMP,WAAW,CAACQ,OAAZ,CAAoB,8GAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACHV,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,IAAD,KAAW;AAC5BC,QAAAA,KAAK,EAAED,IAAI,CAACC,KADgB;AAE5BC,QAAAA,OAAO,EAAEF,IAAI,CAACE,OAFc;AAG5BC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAHgB;AAI5BC,QAAAA,EAAE,EAAEJ,IAAI,CAACK,GAAL,CAASC,QAAT;AAJwB,OAAX,CAAZ;AADN,KADJ;AASHC,IAAAA,UAAU,EAAE,CATT,CASY;;AATZ,GAAP;AAWH;AACD,eAAepB,QAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n    return <Fragment> <MeetupList meetups={props.meetups} />\r\n    </Fragment>\r\n}\r\n\r\n// Server Side Rendering (SSR) for pre-rendering component\r\n// export async function getServerSideProps(context) {\r\n//     const req = context.req;\r\n//     const res = context.res;\r\n\r\n//     // fetch data\r\n\r\n//     return {\r\n//         props: {\r\n//             meetups: dummy\r\n//         }\r\n//     }\r\n// }\r\n\r\n// Static Site  Generation (SSG) for pre-rendering component\r\nexport async function getStaticProps() {\r\n    const client = await MongoClient.connect(\"mongodb+srv://amohamed5535:j1IJSAFLlXtQEgdf@cluster0.gnskzxn.mongodb.net/meetups?retryWrites=true&w=majority\")\r\n    const db = client.db()\r\n\r\n    const meetupsCollection = db.collection('meetups');\r\n    const meetups = await meetupsCollection.find().toArray();\r\n\r\n    client.close()\r\n\r\n    return {\r\n        props: {\r\n            meetups: meetups.map((item) => ({\r\n                title: item.title,\r\n                address: item.address,\r\n                image: item.image,\r\n                id: item._id.toString(),\r\n            }))\r\n        },\r\n        revalidate: 1  // every second get data\r\n    }\r\n}\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}